<%-- 
 * Template to generate a IBatis compatible business object from the database
 * Id: IBatis.cst 2006-07-24
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" 
	Description="产生一个可供IBatisNet使用的实体类" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="在数据库中选择实体类对应的表" %>
<%@ Property Name="ClassName" Type="System.String" Category="Context" Description="数据实体类的名称" %>
<%@ Property Name="VariablePreChar" Type="System.String" Category="Context" Default="_" Optional="true" Description="在类的成员变量前要添加的前缀，一般为 m_" %>
<%@ Property Name="ColumnPreString" Type="System.String" Category="Context" Default="" Optional="true" Description="要从列名的开始处移除的前缀(例如：col_)" %>
<%@ Property Name="ForcePrivateLowercase" Type="System.Boolean" Category="Context" Default="true" Description="使所有私有成员变量都为小写" %>
<%@ Property Name="ForcePublicCapitalize" Type="System.Boolean" Category="Context" Default="false" Description="使所有公开属性都只大写首字母" %>
<%@ Property Name="RemoveUnderscore" Type="System.Boolean" Category="Context" Default="true" Description="移除列名中的_" %>
<%@ Property Name="UserName" Type="System.String" Category="Context" Default="Anders Cui" Optional="True" 
	Description="生成类的用户名,将出现在注释中." %>

<%-- OutputFile Options --%>
<%@ Property Name="OutputFileDir" Type="System.String" Default="" Category="Output File" Optional="True"
	Description="" %>
	
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.IO" %>
/*
This file is generated by CodeSmith 3.0
Created By: <%= UserName %>
Created On: <%= System.DateTime.Now.ToString() %>
Modified By: 
Modified On:
Modified Contents:
Version: 1.0.0
*/
using System;
using System.Collections.Generic;

namespace DomainNamespace
{
	#region <%= ClassName %>
	
	/// <summary>
	/// Domain class [<%= SourceTable.Name %>].
	/// </summary>
	[Serializable]
	public class <%= ClassName %>
	{
		#region Private fields
		
		<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
		private <%= GetPrimaryKeyType(SourceTable,i) %> <%= VariablePreChar %><%= ToCamelCase(SourceTable.PrimaryKey.MemberColumns[i].Name) %>;
		<% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) Response.Write("\r\n"); %>
		<% } %>
		
		<% foreach (ColumnSchema column in SourceTable.NonPrimaryKeyColumns) { %>
		<%= GetMemberVariableDeclarationStatement(column) %>
		<% } %>
		
		#endregion

		#region Constructors
		
		// Instantiate empty <%= ClassName %> for inserting
		public <%= ClassName %>() {}
		
		// Retrieve <%= ClassName %> with Id for updating
		public <%= ClassName %>(<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %><%= GetPrimaryKeyType(SourceTable,i) %> <%= ToCamelCase(SourceTable.PrimaryKey.MemberColumns[i].Name) %><% if ( i+1 < SourceTable.PrimaryKey.MemberColumns.Count ) %> , <% } %>)
		{
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			this.<%= VariablePreChar %><%= ToCamelCase(SourceTable.PrimaryKey.MemberColumns[i].Name) %> = <%= ToCamelCase(SourceTable.PrimaryKey.MemberColumns[i].Name) %>;
			<% } %>
		}
		
		#endregion

		#region Public properties
		
		<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
		public <%= GetPrimaryKeyType(SourceTable,i) %> <%= GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i]) %>
		{
			get{ return <%= VariablePreChar %><%= ToCamelCase(SourceTable.PrimaryKey.MemberColumns[i].Name) %>; }
			set{ <%= VariablePreChar %><%= ToCamelCase(SourceTable.PrimaryKey.MemberColumns[i].Name) %> = value; }
		}
		<% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) Response.Write("\r\n"); %>
		<% } %>
		

		<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
		public <%= GetCSharpNullableVariableType(SourceTable.NonPrimaryKeyColumns[i]) %> <%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>
		{
			get{ return <%= GetMemberVariableName(SourceTable.NonPrimaryKeyColumns[i]) %>; }
			set{ <%= GetMemberVariableName(SourceTable.NonPrimaryKeyColumns[i]) %> = value; }
		}
		<% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) Response.Write("\r\n"); %>
		<% } %>
		
		#endregion
		
		#region Extended properties
		#endregion
	}
	
	#endregion
	
}
	
<script runat="template">

//获得成员变量的声明语句
public string GetMemberVariableDeclarationStatement(ColumnSchema column)
{
	return GetMemberVariableDeclarationStatement("private", column);
}
//获得成员变量的声明语句
public string GetMemberVariableDeclarationStatement(string protectionLevel, ColumnSchema column)
{
	string statement = protectionLevel + " ";
	statement += GetCSharpNullableVariableType(column) + " " + GetMemberVariableName(column);

	string defaultValue = GetMemberVariableDefaultValue(column);
	if (defaultValue != "")
	{
		statement += " = " + defaultValue;
	}

	statement += ";";

	return statement;
}

public string GetReaderAssignmentStatement(ColumnSchema column, int index)
{
	string statement = "if (!reader.IsDBNull(" + index.ToString() + ")) ";
	statement += GetMemberVariableName(column) + " = ";

	if (column.Name.EndsWith("TypeCode")) statement += "(" + column.Name + ")";

	statement += "reader." + GetReaderMethod(column) + "(" + index.ToString() + ");";

	return statement;
}

public string GetCamelCaseName(string value, bool capitalize)
{
	if (capitalize && ForcePublicCapitalize)
	{
		value = value.Substring(0, 1).ToUpper() + value.Substring(1);
	}
	if (ForcePrivateLowercase)
	{
		value = value.Substring(0, 1) + value.Substring(1).ToLower();
	}
	return value;
}

public string GetCamelCaseName(string value)
{
	return GetCamelCaseName(value, false);
}

public string GetMemberVariableName(ColumnSchema column)
{
	string propertyName = GetPropertyName(column);
	string memberVariableName = VariablePreChar + ToCamelCase(propertyName);

	return memberVariableName;
}

public string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;

	if (propertyName.EndsWith("TypeCode"))
	{
		propertyName = propertyName.Substring(0, propertyName.Length - 4);
	}
	// Remove trailing column string
	if(ColumnPreString == null) 
	{
		ColumnPreString = string.Empty;
	}
	if (propertyName.StartsWith(ColumnPreString))
	{
		propertyName = propertyName.Substring(ColumnPreString.Length, propertyName.Length - ColumnPreString.Length);
	}
	// Remove _ and change next char in uppercase
	if (RemoveUnderscore)
	{
	//	propertyName = propertyName.Replace("_", "");
	}
	//return GetCamelCaseName(propertyName, true);
	return propertyName;
}

public string GetMemberVariableDefaultValue(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Guid:
		{
			return "Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "String.Empty";
		}
		default:
		{
			return "";
		}
	}
}

public string GetCSharpVariableType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;

	switch (column.DataType)
	{
		case DbType.AnsiString: return "string";
		case DbType.AnsiStringFixedLength: return "string";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "bool";
		case DbType.Byte: return "byte";
		case DbType.Currency: return "decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "decimal";
		case DbType.Double: return "double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "int";
		case DbType.Int64: return "long";
		case DbType.Object: return "object";
		case DbType.SByte: return "sbyte";
		case DbType.Single: return "float";
		case DbType.String: return "string";
		case DbType.StringFixedLength: return "string";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
		case DbType.VarNumeric: return "decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}

public string GetCSharpNullableVariableType(ColumnSchema column)
{
	string pureType = GetCSharpVariableType(column);
	string nullable = GetMemberVariableNullableString(column);
	
	return pureType + nullable;
}

public string GetMemberVariableNullableString(ColumnSchema column)
{
	if(!column.AllowDBNull)
	{
		return "";
	}
	
	switch (column.DataType)
	{
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "";
		}
		default:
		{
			return "?";
		}
	}
}

public string GetReaderMethod(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Byte:
		{
			return "GetByte";
		}
		case DbType.Int16:
		{
			return "GetInt16";
		}
		case DbType.Int32:
		{
			return "GetInt32";
		}
		case DbType.Int64:
		{
			return "GetInt64";
		}
		case DbType.AnsiStringFixedLength:
		case DbType.AnsiString:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "GetString";
		}
		case DbType.Boolean:
		{
			return "GetBoolean";
		}
		case DbType.Guid:
		{
			return "GetGuid";
		}
		case DbType.Currency:
		case DbType.Decimal:
		{
			return "GetDecimal";
		}
		case DbType.DateTime:
		case DbType.Date:
		{
			return "GetDateTime";
		}
		default:
		{
			return "__SQL__" + column.DataType;
		}
	}
}

public string GetSqlDbType(ColumnSchema column)
{
	switch (column.NativeType)
	{
		case "bigint": return "BigInt";
		case "binary": return "Binary";
		case "bit": return "Bit";
		case "char": return "Char";
		case "datetime": return "DateTime";
		case "decimal": return "Decimal";
		case "float": return "Float";
		case "image": return "Image";
		case "int": return "Int";
		case "money": return "Money";
		case "nchar": return "NChar";
		case "ntext": return "NText";
		case "numeric": return "Decimal";
		case "nvarchar": return "NVarChar";
		case "real": return "Real";
		case "smalldatetime": return "SmallDateTime";
		case "smallint": return "SmallInt";
		case "smallmoney": return "SmallMoney";
		case "sql_variant": return "Variant";
		case "sysname": return "NChar";
		case "text": return "Text";
		case "timestamp": return "Timestamp";
		case "tinyint": return "TinyInt";
		case "uniqueidentifier": return "UniqueIdentifier";
		case "varbinary": return "VarBinary";
		case "varchar": return "VarChar";
		default: return "__UNKNOWN__" + column.NativeType;
	}
}

public string GetPrimaryKeyType(TableSchema table,int index)
{
	if (table.PrimaryKey != null)
	{
		return GetCSharpVariableType(table.PrimaryKey.MemberColumns[index]);
	}
	else
	{
		throw new ApplicationException("This template will only work on tables with a primary key.");
	}
}

public string ToCamelCase(string input)
{
	if(input == null || input.Length < 1)
	{
		return input;
	}
	return input.Substring(0, 1).ToLower() + input.Substring(1);
}

// Override the OutputFile property and assign our specific settings to it.
[FileDialog(FileDialogType.Save, Title="Select Output File", Filter="Query Files (*.sql)|*.sql|All Files (*.*)|*.*", DefaultExtension=".sql")]
public override string OutputFile
{
	get
	{
		return base.OutputFile;
	}
	set 
	{
		base.OutputFile = value;
	}
}

protected override void OnPostRender(string result)
{
	if(OutputFile != null && OutputFile.Length > 0)
	{
		OutputFile = Path.Combine(OutputFileDir, SourceTable.Name + ".cs");
	}
	
	base.OnPostRender(result);
}

</script>